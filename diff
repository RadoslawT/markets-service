diff --git a/app/domain/aggregates/market_with_tasks_to_complete.rb b/app/domain/aggregates/market_with_tasks_to_complete.rb
index 2697f72..adc98ac 100644
--- a/app/domain/aggregates/market_with_tasks_to_complete.rb
+++ b/app/domain/aggregates/market_with_tasks_to_complete.rb
@@ -3,23 +3,17 @@
 module Aggregates
   # :nodoc:
   class MarketWithTasksToComplete
-    attr_reader :root, :tasks
+    attr_reader :root, :tasks_to_complete
 
-    def initialize(root:, tasks: [])
+    def initialize(root:, tasks_to_complete: [])
       @root = root
-      @tasks = tasks
+      @tasks_to_complete = tasks_to_complete
     end
 
     def update_price(price:)
       return if @root.price == price
 
-      tasks_to_complete = if price < @root.price
-                            drop_tasks(price)
-                          else
-                            hit_tasks(price)
-                          end
-
-      tasks_to_complete.each(&:complete)
+      @tasks_to_complete.each(&:complete)
 
       @root.price = price
       nil
@@ -31,16 +25,8 @@ module Aggregates
 
     private
 
-    def drop_tasks(price)
-      @tasks.select { |t| t.type_drop? && t.completion_price >= price }
-    end
-
-    def hit_tasks(price)
-      @tasks.select { |t| t.type_hit? && t.completion_price <= price }
-    end
-
     def completed_tasks
-      @tasks.select(&:completed?)
+      @tasks_to_complete.select(&:completed?)
     end
 
     def emit_task_completed_event(task)
diff --git a/app/domain/handlers/update_market_price.rb b/app/domain/handlers/update_market_price.rb
index 9c1d5c6..5214d7f 100644
--- a/app/domain/handlers/update_market_price.rb
+++ b/app/domain/handlers/update_market_price.rb
@@ -7,7 +7,8 @@ module Handlers
     def call(command:)
       market = Repositories::MarketWithTasksToComplete.find_by(
         platform: command[:data][:platform],
-        name: command[:data][:market_name]
+        name: command[:data][:market_name],
+        new_price: command[:data][:market_price]
       )
       return unless market
 
diff --git a/app/domain/repositories/market_with_tasks_to_complete.rb b/app/domain/repositories/market_with_tasks_to_complete.rb
index 6c51efb..6bbb8be 100644
--- a/app/domain/repositories/market_with_tasks_to_complete.rb
+++ b/app/domain/repositories/market_with_tasks_to_complete.rb
@@ -6,18 +6,22 @@ module Repositories
     @uow = UnitsOfWork::ActiveRecord
 
     class << self
-      def find_by(params)
+      def find_by(new_price:, **params)
         market = Market.find_by(params)
         return unless market
 
-        tasks = Task.where(market_uuid: market.uuid)
+        tasks_to_complete = Repositories::Task.tasks_to_complete(
+          market_uuid: market.uuid,
+          market_price: market.price,
+          new_price: new_price
+        )
 
-        Aggregates::MarketWithTasksToComplete.new(root: market, tasks: tasks)
+        Aggregates::MarketWithTasksToComplete.new(root: market, tasks_to_complete: tasks_to_complete)
       end
 
       def adapt(market)
         Market.adapt(market.root)
-        market.tasks.each { |t| Task.adapt(t) }
+        market.tasks_to_complete.each { |t| Task.adapt(t) }
         self
       end
     end
diff --git a/app/domain/repositories/task.rb b/app/domain/repositories/task.rb
index e611e11..4aa78ea 100644
--- a/app/domain/repositories/task.rb
+++ b/app/domain/repositories/task.rb
@@ -4,5 +4,25 @@ module Repositories
   # :nodoc:
   class Task < Repository
     @uow = UnitsOfWork::ActiveRecord
+
+    class << self
+      def tasks_to_complete(market_uuid:, market_price:, new_price:)
+        if new_price < market_price
+          drop_tasks_to_complete(market_uuid, new_price)
+        else
+          hit_tasks_to_complete(market_uuid, new_price)
+        end
+      end
+
+      private
+
+      def drop_tasks_to_complete(market_uuid, new_price)
+        where(market_uuid: market_uuid, type: ValueObjects::TaskType::DROP, completion_price: new_price..Float::INFINITY)
+      end
+
+      def hit_tasks_to_complete(market_uuid, new_price)
+        where(market_uuid: market_uuid, type: ValueObjects::TaskType::HIT, completion_price: -Float::INFINITY..new_price)
+      end
+    end
   end
 end
diff --git a/spec/domain/aggregates/market_with_tasks_to_complete_spec.rb b/spec/domain/aggregates/market_with_tasks_to_complete_spec.rb
index 4d2ac8b..b626b20 100644
--- a/spec/domain/aggregates/market_with_tasks_to_complete_spec.rb
+++ b/spec/domain/aggregates/market_with_tasks_to_complete_spec.rb
@@ -21,7 +21,7 @@ describe Aggregates::MarketWithTasksToComplete do
   describe '#update_price' do
     subject(:update_price) { aggregate.update_price(price: new_price) }
 
-    let(:aggregate) { described_class.new(root: market_entity, tasks: tasks) }
+    let(:aggregate) { described_class.new(root: market_entity, tasks_to_complete: tasks) }
     let(:new_price) { price + 1 }
     let(:tasks) { [] }
 
@@ -29,64 +29,12 @@ describe Aggregates::MarketWithTasksToComplete do
       update_price
       expect(market_entity).to have_received(:price=).with(new_price)
     end
-
-    context 'when price drops below the drop task completion price' do
-      let(:tasks) { [drop_task] }
-      let(:drop_task) { instance_double(Entities::Task, type: ValueObjects::TaskType::DROP, completion_price: price / 2, type_drop?: true) }
-      let(:new_price) { price / 3 }
-
-      before { allow(drop_task).to receive(:complete) }
-
-      it 'completes drop type tasks' do
-        update_price
-        expect(drop_task).to have_received(:complete)
-      end
-    end
-
-    context 'when price drops above the drop task completion price' do
-      let(:tasks) { [drop_task] }
-      let(:drop_task) { instance_double(Entities::Task, type: ValueObjects::TaskType::DROP, completion_price: price / 3, type_drop?: true) }
-      let(:new_price) { price / 2 }
-
-      before { allow(drop_task).to receive(:complete) }
-
-      it 'completes drop type tasks' do
-        update_price
-        expect(drop_task).not_to have_received(:complete)
-      end
-    end
-
-    context 'when price raises above the hit task completion price' do
-      let(:tasks) { [hit_task] }
-      let(:hit_task) { instance_double(Entities::Task, type: ValueObjects::TaskType::HIT, completion_price: price * 2, type_hit?: true) }
-      let(:new_price) { price * 3 }
-
-      before { allow(hit_task).to receive(:complete) }
-
-      it 'completes drop type tasks' do
-        update_price
-        expect(hit_task).to have_received(:complete)
-      end
-    end
-
-    context 'when price raises below the hit task completion price' do
-      let(:tasks) { [hit_task] }
-      let(:hit_task) { instance_double(Entities::Task, type: ValueObjects::TaskType::HIT, completion_price: price * 3, type_hit?: true) }
-      let(:new_price) { price * 2 }
-
-      before { allow(hit_task).to receive(:complete) }
-
-      it 'completes drop type tasks' do
-        update_price
-        expect(hit_task).not_to have_received(:complete)
-      end
-    end
   end
 
   describe '#emit_task_completed_events' do
     subject(:emit) { aggregate.emit_task_completed_events }
 
-    let(:aggregate) { described_class.new(root: market_entity, tasks: tasks) }
+    let(:aggregate) { described_class.new(root: market_entity, tasks_to_complete: tasks) }
 
     before { allow(Events::MarketTaskCompleted).to receive(:call) }
 
diff --git a/spec/domain/handlers/update_market_price_spec.rb b/spec/domain/handlers/update_market_price_spec.rb
index 6d89278..1ebb682 100644
--- a/spec/domain/handlers/update_market_price_spec.rb
+++ b/spec/domain/handlers/update_market_price_spec.rb
@@ -26,7 +26,7 @@ describe Handlers::UpdateMarketPrice do
     before do
       allow(market).to receive(:update_price)
       allow(market).to receive(:emit_task_completed_events)
-      allow(repository).to receive(:find_by).with(platform: platform, name: market_name).and_return(market)
+      allow(repository).to receive(:find_by).with(platform: platform, name: market_name, new_price: market_price).and_return(market)
       allow(repository).to receive(:adapt).and_return(repository)
       allow(repository).to receive(:commit)
     end
